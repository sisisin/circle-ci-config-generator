{"version":3,"sources":["app/parser.ts","app/ConfigViewer.tsx","app/App.tsx","app/reportWebVitals.ts","index.tsx"],"names":["toJsonGraph","config","key","jobs","workflowKey","workflows","map","job","value","Object","keys","getJobs","nodes","edges","x","y","forEach","node","id","label","position","requires","requireJob","edge","source","target","push","YAML","parse","ConfigViewer","React","useState","json","setJson","width","height","onChange","newGraphJSON","scale","isVertical","shouldNodeFitContent","JSON","stringify","App","methods","useForm","register","handleSubmit","control","useFieldArray","name","fields","append","useCopyToClipboard","state","copyToClipboard","onSubmit","data","console","log","ref","placeholder","field","i","defaultValue","type","onClick","error","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAKO,SAASA,EAAYC,EAAyBC,GACnD,IAAMC,EAwBD,SAAiBF,EAAyBG,GAC/C,OAAOH,EAAOI,UAAUD,GAAaD,KAAKG,KAAI,SAACC,GAC7C,GAAmB,kBAARA,EACT,MAAO,CAAEL,IAAKK,EAAKC,MAAO,MAE1B,IAAMN,EAAMO,OAAOC,KAAKH,GAAK,GAC7B,MAAO,CAAEL,MAAKM,MAAOD,EAAIL,OA9BhBS,CAAQV,EAAQC,GACvBU,EAAgB,GAChBC,EAAgB,GAElBC,EAAI,EACJC,EAAI,EAWR,OAVAZ,EAAKa,SAAQ,SAACT,GAAS,IAAD,IACdU,EAAa,CAAEC,GAAIX,EAAIL,IAAKiB,MAAOZ,EAAIL,IAAKkB,SAAU,CAAEN,IAAGC,MACjE,UAAAR,EAAIC,aAAJ,mBAAWa,gBAAX,SAAqBL,SAAQ,SAACM,GAC5B,IAAMC,EAAa,CAAEC,OAAQF,EAAYG,OAAQlB,EAAIL,KACrDW,EAAMa,KAAKH,MAEbX,EAAMc,KAAKT,GACXH,GAAK,IACLC,GAAK,MAEA,CAAEF,QAAOD,S,IApBIX,E,wBCEhBA,GDFgBA,EC0Bd,4hDDzBC0B,IAAKC,MAAM3B,ICGP4B,EAAyB,WAAO,IAAD,EAClBC,IAAMC,SAAS/B,EAAYC,EAAQ,UADjB,mBACnC+B,EADmC,KAC7BC,EAD6B,KAE1C,OACE,gCACE,cAAC,IAAD,CACEC,MAAO,KACPC,OAAQ,IACRH,KAAMA,EACNI,SAAU,SAACC,GACTJ,EAAQI,IAEVC,MAAO,EAEPC,YAAU,EACVC,sBAAoB,IAEtB,8BAAMC,KAAKC,UAAUzC,EAAQ,KAAM,Y,oBChB5B0C,EAAgB,WAC3B,IAAMC,EAAUC,cACRC,EAAoCF,EAApCE,SAAUC,EAA0BH,EAA1BG,aAAcC,EAAYJ,EAAZI,QAFC,EAGNC,YAAc,CACvCD,UACAE,KAAM,SAFAC,EAHyB,EAGzBA,OAAQC,EAHiB,EAGjBA,OAHiB,EAQAC,cARA,mBAQ1BC,EAR0B,KAQnBC,EARmB,KAU3BC,EAAWT,GAAa,SAACU,GAC7BC,QAAQC,IAAIhC,IAAKe,UAAUe,IAE3BF,EAAgB5B,IAAKe,UAAUe,OAGjC,OACE,gCACE,cAAC,IAAD,2BAAkBb,GAAlB,aACE,uBAAMY,SAAUA,EAAhB,UACE,gCACE,6CACA,yBAAQN,KAAK,UAAUU,IAAKd,EAAUe,YAAY,UAAlD,UACE,wBAAQrD,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,uBAGJ,gCACE,0CACC2C,EAAO7C,KAAI,SAACwD,EAAOC,GAClB,OACE,8BACE,uBACEb,KAAI,eAAUa,EAAV,WACJH,IAAKd,IACLkB,aAAcF,EAAMtD,SAJdsD,EAAM5C,OASpB,uBAAO+C,KAAK,SAASzD,MAAM,MAAM0D,QAAS,kBAAMd,EAAO,CAAE5C,MAAO,WAElE,gCACG8C,EAAMa,MACL,uDAA0Bb,EAAMa,MAAMC,WAEtCd,EAAM9C,OACJ,0CACS,8BAAM8C,EAAM9C,WAIzB,uBAAOyD,KAAK,oBAIlB,uBACA,cAAC,EAAD,QCjDSI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3137faa2.chunk.js","sourcesContent":["import YAML from 'yaml';\n\nexport function parse(config: string): CircleCi.Config {\n  return YAML.parse(config);\n}\nexport function toJsonGraph(config: CircleCi.Config, key: string): JsonGraph {\n  const jobs = getJobs(config, key);\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  let x = 0;\n  let y = 0;\n  jobs.forEach((job) => {\n    const node: Node = { id: job.key, label: job.key, position: { x, y } };\n    job.value?.requires?.forEach((requireJob) => {\n      const edge: Edge = { source: requireJob, target: job.key };\n      edges.push(edge);\n    });\n    nodes.push(node);\n    x += 210;\n    y += 50;\n  });\n  return { edges, nodes };\n}\ntype JsonGraph = { edges: Edge[]; nodes: Node[] };\ntype Edge = { source: string; target: string };\ntype Node = { id: string; label: string; position: { x: number; y: number } | {} };\nexport function getWorkflows(config: CircleCi.Config): [string, CircleCi.Workflow][] {\n  return Object.entries(config.workflows);\n}\nexport function getJobs(config: CircleCi.Config, workflowKey: string): CCNode.WorkflowJob[] {\n  return config.workflows[workflowKey].jobs.map((job) => {\n    if (typeof job === 'string') {\n      return { key: job, value: null };\n    } else {\n      const key = Object.keys(job)[0];\n      return { key, value: job[key] };\n    }\n  });\n}\nexport function getWorkflowJobDetail(workflowJobs: CCNode.WorkflowJob[], key: string) {\n  return workflowJobs.find((j) => j.key === key)!;\n}\nexport function getNext(workflowJobs: CCNode.WorkflowJob[], key: string): string[] {\n  const result = workflowJobs\n    .filter((job) => {\n      if (job.key === key) return false;\n      return job.value?.requires?.includes(key);\n    })\n    .map((job) => job.key);\n  return result;\n}\ndeclare namespace CCNode {\n  export type WorkflowJob = {\n    key: string;\n    value: CircleCi.Workflow.JobWithConditionBody | null;\n  };\n}\nexport declare namespace CircleCi {\n  export type Config = {\n    version: number;\n    workflows: Record<string, Workflow>;\n    jobs: Record<string, object>;\n  };\n  export type Workflow = {\n    jobs: Workflow.Job[];\n    triggers?: unknown; // todo\n  };\n  export namespace Workflow {\n    export type JobOnlyName = string;\n    export type JobWithCondition = Record<string, JobWithConditionBody>;\n    export type JobWithConditionBody = {\n      filters?: object[];\n      requires?: string[];\n      type?: 'approval';\n      context?: unknown; // todo\n    };\n    export type Job = JobOnlyName | JobWithCondition;\n  }\n}\n","import React from 'react';\nimport { parse, toJsonGraph } from './parser';\nimport Graph from 'react-json-graph';\n\nconst config = parse(getSample());\n\nexport const ConfigViewer: React.FC = () => {\n  const [json, setJson] = React.useState(toJsonGraph(config, 'test2'));\n  return (\n    <div>\n      <Graph\n        width={1600}\n        height={600}\n        json={json}\n        onChange={(newGraphJSON: any) => {\n          setJson(newGraphJSON);\n        }}\n        scale={1}\n        // minScale={0.5}\n        isVertical\n        shouldNodeFitContent\n      />\n      <pre>{JSON.stringify(config, null, '  ')}</pre>\n    </div>\n  );\n};\n\nfunction getSample(): string {\n  return `\nversion: 2.1\nworkflows:\n  tests:\n    jobs:\n      - test\n      - deploy:\n          filters:\n            branches:\n              only: master\n          requires:\n            - test\n  test2:\n    jobs:\n      - build\n      - acceptance_test_1:\n          requires:\n            - build\n      - acceptance_test_2:\n          requires:\n            - build\n      - acceptance_test_3:\n          requires:\n            - build\n      - acceptance_test_4:\n          requires:\n            - build\n      - deploy:\n          requires:\n            - acceptance_test_1\n            - acceptance_test_2\n            - acceptance_test_3\n            - acceptance_test_4\n\ncommands:\n  setup:\n    steps:\n      - checkout\n      - restore_cache:\n          keys:\n            - key-v2-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n            - key-v2-{{ .Branch }}\n            - key-v2-master\n            - key-v2-\n      - run: yarn install\njobs:\n  test:\n    docker:\n      - image: circleci/node:14.15.5\n    steps:\n      - checkout\n      - setup\n      - save_cache:\n          paths:\n            - node_modules/\n          key: key-v2-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n      - run: yarn test\n  deploy:\n    docker:\n      - image: circleci/node:14.15.5\n    steps:\n      - add_ssh_keys:\n          fingerprints:\n            - 'fd:81:f7:f7:e7:ff:32:2e:4c:16:90:41:5b:8b:77:19'\n      - setup\n      - run: |\n          git config user.email \"azsisisin@gmail.com\"\n          git config user.name \"sisisin\"\n      - run: yarn deploy\n`;\n}\n","import React from 'react';\nimport { ConfigViewer } from './ConfigViewer';\nimport { FormProvider, useFieldArray, useForm } from 'react-hook-form';\nimport { useCopyToClipboard } from 'react-use';\nimport YAML from 'yaml';\n\nexport const App: React.FC = () => {\n  const methods = useForm();\n  const { register, handleSubmit, control } = methods;\n  const { fields, append } = useFieldArray({\n    control,\n    name: 'jobs',\n  });\n\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  const onSubmit = handleSubmit((data) => {\n    console.log(YAML.stringify(data));\n\n    copyToClipboard(YAML.stringify(data));\n  });\n\n  return (\n    <div>\n      <FormProvider {...methods}>\n        <form onSubmit={onSubmit}>\n          <div>\n            <label>version:</label>\n            <select name=\"version\" ref={register} placeholder=\"version\">\n              <option value=\"2.0\">2.0</option>\n              <option value=\"2.1\">2.1</option>\n            </select>\n          </div>\n          <div>\n            <label>jobs:</label>\n            {fields.map((field, i) => {\n              return (\n                <div key={field.id}>\n                  <input\n                    name={`jobs[${i}].value`}\n                    ref={register()}\n                    defaultValue={field.value}\n                  ></input>\n                </div>\n              );\n            })}\n            <input type=\"button\" value=\"add\" onClick={() => append({ value: '' })}></input>\n          </div>\n          <div>\n            {state.error ? (\n              <p>Unable to copy value: {state.error.message}</p>\n            ) : (\n              state.value && (\n                <div>\n                  Copied.<pre>{state.value}</pre>\n                </div>\n              )\n            )}\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </FormProvider>\n      <hr></hr>\n      <ConfigViewer></ConfigViewer>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'app/App';\nimport reportWebVitals from 'app/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}